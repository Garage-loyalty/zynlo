# Task ID: 6
# Title: Build Email Channel Integration
# Status: in-progress
# Dependencies: 5
# Priority: medium
# Description: Implement full email client capabilities with SMTP/IMAP support, threading, attachments, and rich text handling for major email providers.
# Details:
Set up IMAP client for receiving emails with OAuth2 authentication for Gmail/Outlook. Implement email parsing with proper MIME handling for multipart messages. Create SMTP service for sending emails with proper headers and threading. Build email thread reconstruction logic using Message-ID and References headers. Implement attachment extraction and storage in Supabase Storage. Add rich text editor with HTML email composition. Handle email-specific features: CC/BCC, reply-all, forwarding.

# Test Strategy:
Test email reception from multiple providers. Validate threading works correctly with complex email chains. Test attachment handling with various MIME types. Verify sent emails appear correctly in recipient clients.

# Subtasks:
## 1. Set up IMAP Client with OAuth2 Authentication [done]
### Dependencies: None
### Description: Implement IMAP client functionality with OAuth2 authentication support for Gmail and Outlook, including connection management and folder synchronization
### Details:
Use node-imap or imap-simple library. Implement OAuth2 flow for Gmail using Google APIs and for Outlook using Microsoft Graph API. Create connection pool manager for handling multiple email accounts. Implement folder listing, message fetching with pagination, and real-time email monitoring using IDLE command. Store OAuth tokens securely in Supabase with refresh token handling.
<info added on 2025-05-29T20:19:48.850Z>
Successfully implemented IMAP client with OAuth2 authentication:

### Completed:
1. **OAuth2 Handler (oauth2.ts)**
   - Support for Gmail and Outlook OAuth2 flows
   - Authorization URL generation for consent flow
   - Code-to-token exchange
   - Refresh token handling with automatic renewal
   - Token storage in Supabase channels table
   - Connection testing for both providers

2. **IMAP Client (imap-client.ts)**
   - Full IMAP client using imap-simple library
   - Connection pooling for multiple channels
   - OAuth2 authentication with XOAuth2 string generation
   - Password authentication fallback
   - Message fetching with pagination and filtering
   - IDLE support for real-time email notifications
   - Folder operations (list, open, move)
   - Message operations (mark seen/unseen, delete, move)
   - Full email parsing with mailparser
   - Attachment extraction

3. **Email Service (email-service.ts)**
   - Unified service for managing email channels
   - Channel initialization with OAuth2 or password
   - Automatic email fetching with UID tracking
   - Webhook delivery to existing /webhooks/email endpoint
   - Polling and IDLE connection management
   - OAuth2 callback handling
   - Connection lifecycle management

4. **Email Poller (email-poller.ts)**
   - Automatic discovery and initialization of email channels
   - Periodic checking for new channels
   - Provider-specific connection strategies (IDLE vs polling)
   - Graceful shutdown and cleanup

### Key Features Implemented:
- Multiple provider support (Gmail, Outlook, custom IMAP)
- OAuth2 and password authentication options
- Real-time email monitoring with IDLE
- Connection pooling for efficiency
- Automatic token refresh
- Webhook integration with existing system
- Error handling and fallback strategies

### Next Steps:
- The existing gmail-sync.ts uses Gmail API directly
- Our new implementation is more generic with IMAP support
- Could migrate gmail-sync to use our new OAuth2/IMAP infrastructure
</info added on 2025-05-29T20:19:48.850Z>

## 2. Implement Email Parsing and MIME Handling [done]
### Dependencies: 6.1
### Description: Build comprehensive email parsing system to handle multipart MIME messages, extract headers, body content, and identify attachments
### Details:
Use mailparser or similar library for MIME parsing. Extract and parse all relevant headers (From, To, CC, BCC, Subject, Date, Message-ID, References, In-Reply-To). Handle multipart messages including text/plain, text/html, and mixed content types. Parse nested message structures and embedded images. Extract attachment metadata without downloading full content. Normalize email addresses and handle various encoding formats (quoted-printable, base64).
<info added on 2025-05-29T20:20:35.763Z>
The email parsing and MIME handling functionality has been fully implemented within the IMAP client module (imap-client.ts) rather than as a separate component. The implementation leverages the mailparser library's simpleParser for comprehensive MIME message parsing with support for all content types and encodings. Header extraction is handled through a Map<string, string[]> structure with specialized processing for threading headers (Message-ID, In-Reply-To, References) and address fields. The parseAddresses() method provides robust address parsing that handles various email formats and normalizes them into a consistent structure. Content extraction supports both text/plain and text/html with automatic base64 decoding and proper multipart message handling. Attachment metadata is efficiently extracted without downloading full content, capturing filename, content type, and size information. The convertParsedMail() method serves as the central transformation point, converting ParsedMail objects to the EmailMessage interface while handling all edge cases and preserving original data integrity. This integrated approach eliminates the need for a separate email parsing service.
</info added on 2025-05-29T20:20:35.763Z>

## 3. Create SMTP Service for Sending Emails [done]
### Dependencies: None
### Description: Implement SMTP client service with proper authentication, header management, and support for threading and email standards
### Details:
Use nodemailer with SMTP transport. Implement OAuth2 authentication for Gmail and Outlook SMTP servers. Generate proper email headers including Message-ID, References, and In-Reply-To for threading. Handle recipient validation, email address formatting, and DKIM signing if required. Implement retry logic with exponential backoff for failed sends. Support both plain text and HTML email composition with automatic plain text fallback generation.
<info added on 2025-05-29T20:32:16.197Z>
Successfully implemented SMTP service for sending emails. Completed SMTP client (smtp-client.ts) with full nodemailer integration, OAuth2 authentication support for Gmail and Outlook, password authentication fallback, connection pooling with automatic reconnection, retry logic with exponential backoff (3 attempts), proper email header generation (Message-ID, In-Reply-To, References), threading support for replies, forward email functionality, attachment support with multiple formats, and comprehensive error handling and recovery.

Integrated SMTP client management into EmailService with unified interface for sending emails, support for reply and forward operations, email send logging to database, and channel-based email sending. Created API endpoints (routes/email/send.ts) including POST /email/send for flexible channel selection, POST /email/test/:channelId for testing, with channel detection by direct channelId, ticket ID, or from email address. Implemented proper reply handling with threading headers, attachment support (base64 encoded), message record creation for ticket replies, and comprehensive error handling and validation.

Updated email poller with SMTP configuration for channel initialization, graceful shutdown handling, and automatic startup on server launch. The SMTP service now supports multi-provider functionality (Gmail, Outlook, custom SMTP), OAuth2 and password authentication, connection pooling for performance, automatic retry on failures, full email threading support, rich text and plain text emails, attachment handling, and test email functionality. The service is fully integrated with the existing email infrastructure and ready for production use.
</info added on 2025-05-29T20:32:16.197Z>

## 4. Build Email Thread Reconstruction and Attachment Storage [pending]
### Dependencies: 6.2
### Description: Implement logic to reconstruct email conversations into threads and handle attachment extraction and storage in Supabase
### Details:
Create thread reconstruction algorithm using Message-ID, References, and In-Reply-To headers. Handle cases where headers are missing by falling back to subject matching and time-based grouping. Implement attachment extraction with streaming to Supabase Storage to handle large files efficiently. Create attachment metadata records in database linking to emails. Generate secure, time-limited URLs for attachment access. Implement virus scanning integration for attachments before storage.

## 5. Implement Rich Text Editor and Email-Specific Features [pending]
### Dependencies: 6.3, 6.4
### Description: Build rich text editor for HTML email composition and implement email-specific features like CC/BCC, reply-all, and forwarding
### Details:
Integrate rich text editor (Quill, TipTap, or similar) with HTML email output. Implement email templates and signature management. Build reply/reply-all logic that properly quotes original messages and maintains threading. Implement forward functionality with attachment handling. Create CC/BCC field management with proper recipient privacy. Add email scheduling, read receipts, and delivery status tracking. Implement draft auto-save functionality.

